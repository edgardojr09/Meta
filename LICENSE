// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract NabisToken is ERC20 {
    address public owner;
    mapping(address => uint256) public lockTime;

    constructor() ERC20("Nabis Token", "NTK") {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function");
        _;
    }

    function setLockTime(address account, uint256 time) public onlyOwner {
        lockTime[account] = time;
    }

    function mint(address account, uint256 amount) public onlyOwner {
        _mint(account, amount);
    }

    function burn(uint256 amount) public {
        require(balanceOf(msg.sender) >= amount, "Insufficient balance to burn");
        _burn(msg.sender, amount);
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        require(block.timestamp >= lockTime[msg.sender], "Tokens are locked");
        return super.transfer(recipient, amount);
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        require(block.timestamp >= lockTime[sender], "Tokens are locked");
        return super.transferFrom(sender, recipient, amount);
    }
}

